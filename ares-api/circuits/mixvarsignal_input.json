{
  "mainCode": "{\n}\n",
  "signalName2Idx": {
    "one": 0,
    "main.i": 2,
    "main.out": 1
  },
  "components": [
    {
      "name": "main",
      "params": {},
      "template": "X",
      "inputSignals": 1
    }
  ],
  "componentName2Idx": {
    "main": 0
  },
  "signals": [
    {
      "names": [
        "one"
      ],
      "triggerComponents": []
    },
    {
      "names": [
        "main.out"
      ],
      "triggerComponents": []
    },
    {
      "names": [
        "main.i"
      ],
      "triggerComponents": [
        0
      ]
    }
  ],
  "constraints": [
    [
      {},
      {},
      {
        "2": "21888242871839275222246405745257275088548364400416034343698204186575808495616"
      }
    ],
    [
      {
        "2": "21888242871839275222246405745257275088548364400416034343698204186575808495616"
      },
      {
        "2": "1"
      },
      {
        "1": "21888242871839275222246405745257275088548364400416034343698204186575808495616"
      }
    ]
  ],
  "templates": {
    "X": "function(ctx) {\n    ctx.setVar(\"r\", [], \"0\");\n    for (ctx.setVar(\"n\", [], \"0\");bigInt(bigInt(ctx.getVar(\"n\",[])).lt(bigInt(ctx.getSignal(\"i\", []))) ? 1 : 0).neq(bigInt(0));(ctx.setVar(\"n\", [], bigInt(ctx.getVar(\"n\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__)) { \n    {\n        (ctx.setVar(\"r\", [], bigInt(ctx.getVar(\"r\",[])).add(bigInt(\"1\")).mod(__P__))).add(__P__).sub(bigInt(1)).mod(__P__);\n    }\n\n     }\n    ctx.assert(ctx.getSignal(\"i\", []), ctx.getVar(\"r\",[]), \"/app/circuits/mixvarsignal.circom:10:4\");\n    ctx.setSignal(\"out\", [], bigInt(ctx.getSignal(\"i\", [])).mul(bigInt(ctx.getSignal(\"i\", []))).mod(__P__));\n}\n"
  },
  "functions": {},
  "nPrvInputs": 0,
  "nPubInputs": 1,
  "nInputs": 1,
  "nOutputs": 1,
  "nVars": 3,
  "nConstants": 0,
  "nSignals": 3
}