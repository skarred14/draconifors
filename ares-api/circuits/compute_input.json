{
  "mainCode": "{\n}\n",
  "signalName2Idx": {
    "one": 0,
    "main.x": 2,
    "main.y": 1,
    "main.x2": 3,
    "main.x3": 4
  },
  "components": [
    {
      "name": "main",
      "params": {},
      "template": "X",
      "inputSignals": 1
    }
  ],
  "componentName2Idx": {
    "main": 0
  },
  "signals": [
    {
      "names": [
        "one"
      ],
      "triggerComponents": []
    },
    {
      "names": [
        "main.y"
      ],
      "triggerComponents": []
    },
    {
      "names": [
        "main.x"
      ],
      "triggerComponents": [
        0
      ]
    },
    {
      "names": [
        "main.x2"
      ],
      "triggerComponents": []
    },
    {
      "names": [
        "main.x3"
      ],
      "triggerComponents": []
    }
  ],
  "constraints": [
    [
      {
        "2": "21888242871839275222246405745257275088548364400416034343698204186575808495616"
      },
      {
        "2": "1"
      },
      {
        "3": "21888242871839275222246405745257275088548364400416034343698204186575808495616"
      }
    ],
    [
      {
        "3": "21888242871839275222246405745257275088548364400416034343698204186575808495616"
      },
      {
        "2": "1"
      },
      {
        "4": "21888242871839275222246405745257275088548364400416034343698204186575808495616"
      }
    ],
    [
      {
        "2": "1"
      },
      {
        "1": "1"
      },
      {
        "0": "6",
        "4": "1"
      }
    ]
  ],
  "templates": {
    "X": "function(ctx) {\n    {\n    {\n        ctx.setVar(\"a\", [], bigInt(bigInt(bigInt(bigInt(ctx.getSignal(\"x\", [])).mul(bigInt(ctx.getSignal(\"x\", []))).mod(__P__)).mul(bigInt(ctx.getSignal(\"x\", []))).mod(__P__)).add(bigInt(\"6\")).mod(__P__)).mul( bigInt(ctx.getSignal(\"x\", [])).inverse(__P__) ).mod(__P__));\n        ctx.setSignal(\"y\", [], ctx.getVar(\"a\",[]));\n    }\n\n    }\n    ctx.setSignal(\"x2\", [], bigInt(ctx.getSignal(\"x\", [])).mul(bigInt(ctx.getSignal(\"x\", []))).mod(__P__));\n    ctx.setSignal(\"x3\", [], bigInt(ctx.getSignal(\"x2\", [])).mul(bigInt(ctx.getSignal(\"x\", []))).mod(__P__));\n    ctx.assert(bigInt(ctx.getSignal(\"x\", [])).mul(bigInt(ctx.getSignal(\"y\", []))).mod(__P__), bigInt(ctx.getSignal(\"x3\", [])).add(bigInt(\"6\")).mod(__P__), \"/app/circuits/compute.circom:14:4\");\n}\n"
  },
  "functions": {},
  "nPrvInputs": 0,
  "nPubInputs": 1,
  "nInputs": 1,
  "nOutputs": 1,
  "nVars": 5,
  "nConstants": 0,
  "nSignals": 5
}